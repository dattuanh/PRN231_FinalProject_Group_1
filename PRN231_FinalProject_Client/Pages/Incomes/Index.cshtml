@page
@model PRN231_FinalProject_Client.Pages.Incomes.IndexModel
@{
    ViewData["Title"] = "Index";
}
<h1>Incomes</h1>
<p>
    <a class="btn btn-primary" asp-page="Create">Create New</a>
</p>
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Entry</h3>
        <div class="card-tools">
            <div id="dateAlert" class="alert alert-danger" style="display: none;"></div>
            <form method="get">
                <div class="input-group">
                    <input type="text" name="searchString" class="form-control" placeholder="Search by description" value="@Model.SearchString">
                    <input type="date" id="fromDate" name="fromDate" class="form-control" value="@Model.FromDate?.ToString("yyyy-MM-dd")">
                    <input type="date" id="toDate" name="toDate" class="form-control" value="@Model.ToDate?.ToString("yyyy-MM-dd")">
                    <select name="source" class="form-control">
                        <option value="">All Sources</option>
                        @foreach (var source in Model.Sources)
                        {
                            <option value="@source" selected="@(source == Model.SelectedSource)">@source</option>
                        }
                    </select>
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-default">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="card-body table-responsive p-0" style="height: 300px;">
        <table class="table table-head-fixed text-nowrap">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Income[0].IncomeDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Income[0].Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Income[0].Source)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Income[0].Description)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Income)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.IncomeDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Amount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Source)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            <a class="btn btn-primary" asp-page="./Edit" asp-route-id="@item.IncomeId">Edit</a> |
                            <a class="btn btn-warning" asp-page="./Details" asp-route-id="@item.IncomeId">Details</a> |
                            <a class="btn btn-danger" asp-page="./Delete" asp-route-id="@item.IncomeId">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fromDateInput = document.getElementById('fromDate');
            const toDateInput = document.getElementById('toDate');
            const alertDiv = document.getElementById('dateAlert');
            const submitButton = document.querySelector('button[type="submit"]');

            function validateDates() {
                const fromDate = new Date(fromDateInput.value);
                const toDate = new Date(toDateInput.value);
                const today = new Date();
                

                let errorMessage = '';

                if (fromDate > today || toDate > today) {
                    errorMessage = 'Dates cannot be in the future.';
                } else if (fromDate > toDate) {
                    errorMessage = 'From Date cannot be later than To Date.';
                }

                if (errorMessage) {
                    alertDiv.textContent = errorMessage;
                    alertDiv.style.display = 'block';
                    submitButton.disabled = true;
                } else {
                    alertDiv.style.display = 'none';
                    submitButton.disabled = false;
                }
            }

            fromDateInput.addEventListener('change', validateDates);
            toDateInput.addEventListener('change', validateDates);

            // Set max date for both inputs to today
            const today = new Date().toISOString().split('T')[0];
            fromDateInput.max = today;
            toDateInput.max = today;

            // Initial validation
            validateDates();
        });
    </script>
}